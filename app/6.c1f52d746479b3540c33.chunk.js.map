{"version":3,"sources":["webpack:///./src/main/webapp/app/account/register/register.vue?7aed","webpack:///./src/main/webapp/app/account/register/register.component.ts","webpack:///./src/main/webapp/app/account/register/register.component.ts?aeb2","webpack:///./src/main/webapp/app/account/register/register.vue"],"names":["render","_vm","this","_h","$createElement","_c","_self","staticClass","attrs","id","domProps","textContent","_s","$t","_v","success","role","innerHTML","_e","error","errorUserExists","errorEmailExists","doNotMatch","name","no-validate","on","submit","$event","preventDefault","register","for","directives","rawName","value","$v","registerAccount","login","$model","expression","class","valid","$invalid","invalid","type","required","minlength","maxlength","pattern","placeholder","input","target","composing","$set","$anyDirty","minLength","maxLength","email","password","confirmPassword","$dirty","disabled","click","openLogin","_withStripped","a","s","o","n","i","l","loginPattern","validators","helpers","regex","validations","Object","register_register_componentvue_type_script_lang_ts_","_super","Register","_this","apply","arguments","e","tslib_es6","c","prototype","langKey","$store","getters","currentLanguage","registerService","processRegistration","then","catch","response","status","data","constants","loginService","$root","b","vue_property_decorator","d","Function","vue_esm","default","g","component","componentNormalizer","options","__file","__webpack_exports__"],"mappings":"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","file":"app/6.c1f52d746479b3540c33.chunk.js","sourcesContent":["var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\"div\", [\n    _c(\"div\", { staticClass: \"row justify-content-center\" }, [\n      _c(\"div\", { staticClass: \"col-md-8 toastify-container\" }, [\n        _c(\n          \"h1\",\n          {\n            attrs: { id: \"register-title\" },\n            domProps: { textContent: _vm._s(_vm.$t(\"register.title\")) }\n          },\n          [_vm._v(\"Registration\")]\n        ),\n        _vm._v(\" \"),\n        _vm.success\n          ? _c(\n              \"div\",\n              {\n                staticClass: \"alert alert-success\",\n                attrs: { role: \"alert\" },\n                domProps: {\n                  innerHTML: _vm._s(_vm.$t(\"register.messages.success\"))\n                }\n              },\n              [\n                _c(\"strong\", [_vm._v(\"Registration saved!\")]),\n                _vm._v(\n                  \" Please check your email for confirmation.\\n            \"\n                )\n              ]\n            )\n          : _vm._e(),\n        _vm._v(\" \"),\n        _vm.error\n          ? _c(\n              \"div\",\n              {\n                staticClass: \"alert alert-danger\",\n                attrs: { role: \"alert\" },\n                domProps: {\n                  innerHTML: _vm._s(_vm.$t(\"register.messages.error.fail\"))\n                }\n              },\n              [\n                _c(\"strong\", [_vm._v(\"Registration failed!\")]),\n                _vm._v(\" Please try again later.\\n            \")\n              ]\n            )\n          : _vm._e(),\n        _vm._v(\" \"),\n        _vm.errorUserExists\n          ? _c(\n              \"div\",\n              {\n                staticClass: \"alert alert-danger\",\n                attrs: { role: \"alert\" },\n                domProps: {\n                  innerHTML: _vm._s(\n                    _vm.$t(\"register.messages.error.userexists\")\n                  )\n                }\n              },\n              [\n                _c(\"strong\", [_vm._v(\"Login name already registered!\")]),\n                _vm._v(\" Please choose another one.\\n            \")\n              ]\n            )\n          : _vm._e(),\n        _vm._v(\" \"),\n        _vm.errorEmailExists\n          ? _c(\n              \"div\",\n              {\n                staticClass: \"alert alert-danger\",\n                attrs: { role: \"alert\" },\n                domProps: {\n                  innerHTML: _vm._s(\n                    _vm.$t(\"register.messages.error.emailexists\")\n                  )\n                }\n              },\n              [\n                _c(\"strong\", [_vm._v(\"Email is already in use!\")]),\n                _vm._v(\" Please choose another one.\\n            \")\n              ]\n            )\n          : _vm._e(),\n        _vm._v(\" \"),\n        _vm.doNotMatch\n          ? _c(\n              \"div\",\n              {\n                staticClass: \"alert alert-danger\",\n                attrs: { role: \"alert\" },\n                domProps: {\n                  textContent: _vm._s(_vm.$t(\"global.messages.error.dontmatch\"))\n                }\n              },\n              [\n                _vm._v(\n                  \"\\n                The password and its confirmation do not match!\\n            \"\n                )\n              ]\n            )\n          : _vm._e()\n      ])\n    ]),\n    _vm._v(\" \"),\n    _c(\"div\", { staticClass: \"row justify-content-center\" }, [\n      _c(\"div\", { staticClass: \"col-md-8\" }, [\n        !_vm.success\n          ? _c(\n              \"form\",\n              {\n                attrs: {\n                  id: \"register-form\",\n                  name: \"registerForm\",\n                  role: \"form\",\n                  \"no-validate\": \"\"\n                },\n                on: {\n                  submit: function($event) {\n                    $event.preventDefault()\n                    return _vm.register()\n                  }\n                }\n              },\n              [\n                _c(\"div\", { staticClass: \"form-group\" }, [\n                  _c(\n                    \"label\",\n                    {\n                      staticClass: \"form-control-label\",\n                      attrs: { for: \"username\" },\n                      domProps: {\n                        textContent: _vm._s(_vm.$t(\"global.form.username\"))\n                      }\n                    },\n                    [_vm._v(\"Username\")]\n                  ),\n                  _vm._v(\" \"),\n                  _c(\"input\", {\n                    directives: [\n                      {\n                        name: \"model\",\n                        rawName: \"v-model\",\n                        value: _vm.$v.registerAccount.login.$model,\n                        expression: \"$v.registerAccount.login.$model\"\n                      }\n                    ],\n                    staticClass: \"form-control\",\n                    class: {\n                      valid: !_vm.$v.registerAccount.login.$invalid,\n                      invalid: _vm.$v.registerAccount.login.$invalid\n                    },\n                    attrs: {\n                      type: \"text\",\n                      id: \"username\",\n                      name: \"login\",\n                      required: \"\",\n                      minlength: \"1\",\n                      maxlength: \"50\",\n                      pattern: \"^[_.@A-Za-z0-9-]*$\",\n                      placeholder: _vm.$t(\"global.form['username.placeholder']\")\n                    },\n                    domProps: { value: _vm.$v.registerAccount.login.$model },\n                    on: {\n                      input: function($event) {\n                        if ($event.target.composing) {\n                          return\n                        }\n                        _vm.$set(\n                          _vm.$v.registerAccount.login,\n                          \"$model\",\n                          $event.target.value\n                        )\n                      }\n                    }\n                  }),\n                  _vm._v(\" \"),\n                  _vm.$v.registerAccount.login.$anyDirty &&\n                  _vm.$v.registerAccount.login.$invalid\n                    ? _c(\"div\", [\n                        !_vm.$v.registerAccount.login.required\n                          ? _c(\n                              \"small\",\n                              {\n                                staticClass: \"form-text text-danger\",\n                                domProps: {\n                                  textContent: _vm._s(\n                                    _vm.$t(\n                                      \"register.messages.validate.login.required\"\n                                    )\n                                  )\n                                }\n                              },\n                              [\n                                _vm._v(\n                                  \"\\n                            Your username is required.\\n                        \"\n                                )\n                              ]\n                            )\n                          : _vm._e(),\n                        _vm._v(\" \"),\n                        !_vm.$v.registerAccount.login.minLength\n                          ? _c(\n                              \"small\",\n                              {\n                                staticClass: \"form-text text-danger\",\n                                domProps: {\n                                  textContent: _vm._s(\n                                    _vm.$t(\n                                      \"register.messages.validate.login.minlength\"\n                                    )\n                                  )\n                                }\n                              },\n                              [\n                                _vm._v(\n                                  \"\\n                            Your username is required to be at least 1 character.\\n                        \"\n                                )\n                              ]\n                            )\n                          : _vm._e(),\n                        _vm._v(\" \"),\n                        !_vm.$v.registerAccount.login.maxLength\n                          ? _c(\n                              \"small\",\n                              {\n                                staticClass: \"form-text text-danger\",\n                                domProps: {\n                                  textContent: _vm._s(\n                                    _vm.$t(\n                                      \"register.messages.validate.login.maxlength\"\n                                    )\n                                  )\n                                }\n                              },\n                              [\n                                _vm._v(\n                                  \"\\n                            Your username cannot be longer than 50 characters.\\n                        \"\n                                )\n                              ]\n                            )\n                          : _vm._e(),\n                        _vm._v(\" \"),\n                        !_vm.$v.registerAccount.login.pattern\n                          ? _c(\n                              \"small\",\n                              {\n                                staticClass: \"form-text text-danger\",\n                                domProps: {\n                                  textContent: _vm._s(\n                                    _vm.$t(\n                                      \"register.messages.validate.login.pattern\"\n                                    )\n                                  )\n                                }\n                              },\n                              [\n                                _vm._v(\n                                  \"\\n                            Your username can only contain letters and digits.\\n                        \"\n                                )\n                              ]\n                            )\n                          : _vm._e()\n                      ])\n                    : _vm._e()\n                ]),\n                _vm._v(\" \"),\n                _c(\"div\", { staticClass: \"form-group\" }, [\n                  _c(\n                    \"label\",\n                    {\n                      staticClass: \"form-control-label\",\n                      attrs: { for: \"email\" },\n                      domProps: {\n                        textContent: _vm._s(_vm.$t(\"global.form.email\"))\n                      }\n                    },\n                    [_vm._v(\"Email\")]\n                  ),\n                  _vm._v(\" \"),\n                  _c(\"input\", {\n                    directives: [\n                      {\n                        name: \"model\",\n                        rawName: \"v-model\",\n                        value: _vm.$v.registerAccount.email.$model,\n                        expression: \"$v.registerAccount.email.$model\"\n                      }\n                    ],\n                    staticClass: \"form-control\",\n                    class: {\n                      valid: !_vm.$v.registerAccount.email.$invalid,\n                      invalid: _vm.$v.registerAccount.email.$invalid\n                    },\n                    attrs: {\n                      type: \"email\",\n                      id: \"email\",\n                      name: \"email\",\n                      minlength: \"5\",\n                      maxlength: \"254\",\n                      email: \"\",\n                      required: \"\",\n                      placeholder: _vm.$t(\"global.form['email.placeholder']\")\n                    },\n                    domProps: { value: _vm.$v.registerAccount.email.$model },\n                    on: {\n                      input: function($event) {\n                        if ($event.target.composing) {\n                          return\n                        }\n                        _vm.$set(\n                          _vm.$v.registerAccount.email,\n                          \"$model\",\n                          $event.target.value\n                        )\n                      }\n                    }\n                  }),\n                  _vm._v(\" \"),\n                  _vm.$v.registerAccount.email.$anyDirty &&\n                  _vm.$v.registerAccount.email.$invalid\n                    ? _c(\"div\", [\n                        !_vm.$v.registerAccount.email.required\n                          ? _c(\n                              \"small\",\n                              {\n                                staticClass: \"form-text text-danger\",\n                                domProps: {\n                                  textContent: _vm._s(\n                                    _vm.$t(\n                                      \"global.messages.validate.email.required\"\n                                    )\n                                  )\n                                }\n                              },\n                              [\n                                _vm._v(\n                                  \"\\n                            Your email is required.\\n                        \"\n                                )\n                              ]\n                            )\n                          : _vm._e(),\n                        _vm._v(\" \"),\n                        !_vm.$v.registerAccount.email.email\n                          ? _c(\n                              \"small\",\n                              {\n                                staticClass: \"form-text text-danger\",\n                                domProps: {\n                                  textContent: _vm._s(\n                                    _vm.$t(\n                                      \"global.messages.validate.email.invalid\"\n                                    )\n                                  )\n                                }\n                              },\n                              [\n                                _vm._v(\n                                  \"\\n                            Your email is invalid.\\n                        \"\n                                )\n                              ]\n                            )\n                          : _vm._e(),\n                        _vm._v(\" \"),\n                        !_vm.$v.registerAccount.email.minLength\n                          ? _c(\n                              \"small\",\n                              {\n                                staticClass: \"form-text text-danger\",\n                                domProps: {\n                                  textContent: _vm._s(\n                                    _vm.$t(\n                                      \"global.messages.validate.email.minlength\"\n                                    )\n                                  )\n                                }\n                              },\n                              [\n                                _vm._v(\n                                  \"\\n                            Your email is required to be at least 5 characters.\\n                        \"\n                                )\n                              ]\n                            )\n                          : _vm._e(),\n                        _vm._v(\" \"),\n                        !_vm.$v.registerAccount.email.maxLength\n                          ? _c(\n                              \"small\",\n                              {\n                                staticClass: \"form-text text-danger\",\n                                domProps: {\n                                  textContent: _vm._s(\n                                    _vm.$t(\n                                      \"global.messages.validate.email.maxlength\"\n                                    )\n                                  )\n                                }\n                              },\n                              [\n                                _vm._v(\n                                  \"\\n                            Your email cannot be longer than 100 characters.\\n                        \"\n                                )\n                              ]\n                            )\n                          : _vm._e()\n                      ])\n                    : _vm._e()\n                ]),\n                _vm._v(\" \"),\n                _c(\"div\", { staticClass: \"form-group\" }, [\n                  _c(\n                    \"label\",\n                    {\n                      staticClass: \"form-control-label\",\n                      attrs: { for: \"firstPassword\" },\n                      domProps: {\n                        textContent: _vm._s(_vm.$t(\"global.form.newpassword\"))\n                      }\n                    },\n                    [_vm._v(\"New password\")]\n                  ),\n                  _vm._v(\" \"),\n                  _c(\"input\", {\n                    directives: [\n                      {\n                        name: \"model\",\n                        rawName: \"v-model\",\n                        value: _vm.$v.registerAccount.password.$model,\n                        expression: \"$v.registerAccount.password.$model\"\n                      }\n                    ],\n                    staticClass: \"form-control\",\n                    class: {\n                      valid: !_vm.$v.registerAccount.password.$invalid,\n                      invalid: _vm.$v.registerAccount.password.$invalid\n                    },\n                    attrs: {\n                      type: \"password\",\n                      id: \"firstPassword\",\n                      name: \"password\",\n                      minlength: \"4\",\n                      maxlength: \"50\",\n                      required: \"\",\n                      placeholder: _vm.$t(\n                        \"global.form['newpassword.placeholder']\"\n                      )\n                    },\n                    domProps: { value: _vm.$v.registerAccount.password.$model },\n                    on: {\n                      input: function($event) {\n                        if ($event.target.composing) {\n                          return\n                        }\n                        _vm.$set(\n                          _vm.$v.registerAccount.password,\n                          \"$model\",\n                          $event.target.value\n                        )\n                      }\n                    }\n                  }),\n                  _vm._v(\" \"),\n                  _vm.$v.registerAccount.password.$anyDirty &&\n                  _vm.$v.registerAccount.password.$invalid\n                    ? _c(\"div\", [\n                        !_vm.$v.registerAccount.password.required\n                          ? _c(\n                              \"small\",\n                              {\n                                staticClass: \"form-text text-danger\",\n                                domProps: {\n                                  textContent: _vm._s(\n                                    _vm.$t(\n                                      \"global.messages.validate.newpassword.required\"\n                                    )\n                                  )\n                                }\n                              },\n                              [\n                                _vm._v(\n                                  \"\\n                            Your password is required.\\n                        \"\n                                )\n                              ]\n                            )\n                          : _vm._e(),\n                        _vm._v(\" \"),\n                        !_vm.$v.registerAccount.password.minLength\n                          ? _c(\n                              \"small\",\n                              {\n                                staticClass: \"form-text text-danger\",\n                                domProps: {\n                                  textContent: _vm._s(\n                                    _vm.$t(\n                                      \"global.messages.validate.newpassword.minlength\"\n                                    )\n                                  )\n                                }\n                              },\n                              [\n                                _vm._v(\n                                  \"\\n                            Your password is required to be at least 4 characters.\\n                        \"\n                                )\n                              ]\n                            )\n                          : _vm._e(),\n                        _vm._v(\" \"),\n                        !_vm.$v.registerAccount.password.maxLength\n                          ? _c(\n                              \"small\",\n                              {\n                                staticClass: \"form-text text-danger\",\n                                domProps: {\n                                  textContent: _vm._s(\n                                    _vm.$t(\n                                      \"global.messages.validate.newpassword.maxlength\"\n                                    )\n                                  )\n                                }\n                              },\n                              [\n                                _vm._v(\n                                  \"\\n                            Your password cannot be longer than 50 characters.\\n                        \"\n                                )\n                              ]\n                            )\n                          : _vm._e()\n                      ])\n                    : _vm._e()\n                ]),\n                _vm._v(\" \"),\n                _c(\"div\", { staticClass: \"form-group\" }, [\n                  _c(\n                    \"label\",\n                    {\n                      staticClass: \"form-control-label\",\n                      attrs: { for: \"secondPassword\" },\n                      domProps: {\n                        textContent: _vm._s(\n                          _vm.$t(\"global.form.confirmpassword\")\n                        )\n                      }\n                    },\n                    [_vm._v(\"New password confirmation\")]\n                  ),\n                  _vm._v(\" \"),\n                  _c(\"input\", {\n                    directives: [\n                      {\n                        name: \"model\",\n                        rawName: \"v-model\",\n                        value: _vm.$v.confirmPassword.$model,\n                        expression: \"$v.confirmPassword.$model\"\n                      }\n                    ],\n                    staticClass: \"form-control\",\n                    class: {\n                      valid: !_vm.$v.confirmPassword.$invalid,\n                      invalid: _vm.$v.confirmPassword.$invalid\n                    },\n                    attrs: {\n                      type: \"password\",\n                      id: \"secondPassword\",\n                      name: \"confirmPasswordInput\",\n                      minlength: \"4\",\n                      maxlength: \"50\",\n                      required: \"\",\n                      placeholder: _vm.$t(\n                        \"global.form['confirmpassword.placeholder']\"\n                      )\n                    },\n                    domProps: { value: _vm.$v.confirmPassword.$model },\n                    on: {\n                      input: function($event) {\n                        if ($event.target.composing) {\n                          return\n                        }\n                        _vm.$set(\n                          _vm.$v.confirmPassword,\n                          \"$model\",\n                          $event.target.value\n                        )\n                      }\n                    }\n                  }),\n                  _vm._v(\" \"),\n                  _vm.$v.confirmPassword.$dirty &&\n                  _vm.$v.confirmPassword.$invalid\n                    ? _c(\"div\", [\n                        !_vm.$v.confirmPassword.required\n                          ? _c(\n                              \"small\",\n                              {\n                                staticClass: \"form-text text-danger\",\n                                domProps: {\n                                  textContent: _vm._s(\n                                    _vm.$t(\n                                      \"global.messages.validate.confirmpassword.required\"\n                                    )\n                                  )\n                                }\n                              },\n                              [\n                                _vm._v(\n                                  \"\\n                            Your confirmation password is required.\\n                        \"\n                                )\n                              ]\n                            )\n                          : _vm._e(),\n                        _vm._v(\" \"),\n                        !_vm.$v.confirmPassword.minLength\n                          ? _c(\n                              \"small\",\n                              {\n                                staticClass: \"form-text text-danger\",\n                                domProps: {\n                                  textContent: _vm._s(\n                                    _vm.$t(\n                                      \"global.messages.validate.confirmpassword.minlength\"\n                                    )\n                                  )\n                                }\n                              },\n                              [\n                                _vm._v(\n                                  \"\\n                            Your confirmation password is required to be at least 4 characters.\\n                        \"\n                                )\n                              ]\n                            )\n                          : _vm._e(),\n                        _vm._v(\" \"),\n                        !_vm.$v.confirmPassword.maxLength\n                          ? _c(\n                              \"small\",\n                              {\n                                staticClass: \"form-text text-danger\",\n                                domProps: {\n                                  textContent: _vm._s(\n                                    _vm.$t(\n                                      \"global.messages.validate.confirmpassword.maxlength\"\n                                    )\n                                  )\n                                }\n                              },\n                              [\n                                _vm._v(\n                                  \"\\n                            Your confirmation password cannot be longer than 50 characters.\\n                        \"\n                                )\n                              ]\n                            )\n                          : _vm._e()\n                      ])\n                    : _vm._e()\n                ]),\n                _vm._v(\" \"),\n                _c(\n                  \"button\",\n                  {\n                    staticClass: \"btn btn-primary\",\n                    attrs: {\n                      type: \"submit\",\n                      disabled:\n                        _vm.$v.registerAccount.$invalid ||\n                        _vm.$v.confirmPassword.$invalid\n                    },\n                    domProps: {\n                      textContent: _vm._s(_vm.$t(\"register.form.button\"))\n                    }\n                  },\n                  [_vm._v(\"Register\")]\n                )\n              ]\n            )\n          : _vm._e(),\n        _vm._v(\" \"),\n        _c(\"p\"),\n        _vm._v(\" \"),\n        _c(\"div\", { staticClass: \"alert alert-warning\" }, [\n          _c(\n            \"span\",\n            {\n              domProps: {\n                textContent: _vm._s(\n                  _vm.$t(\"global.messages.info.authenticated.prefix\")\n                )\n              }\n            },\n            [_vm._v(\"If you want to \")]\n          ),\n          _vm._v(\" \"),\n          _c(\n            \"a\",\n            {\n              staticClass: \"alert-link\",\n              domProps: {\n                textContent: _vm._s(\n                  _vm.$t(\"global.messages.info.authenticated.link\")\n                )\n              },\n              on: {\n                click: function($event) {\n                  return _vm.openLogin()\n                }\n              }\n            },\n            [_vm._v(\"sign in\")]\n          ),\n          _c(\n            \"span\",\n            {\n              domProps: {\n                innerHTML: _vm._s(\n                  _vm.$t(\"global.messages.info.authenticated.suffix\")\n                )\n              }\n            },\n            [\n              _vm._v(\", you can try the default accounts:\"),\n              _c(\"br\"),\n              _vm._v('- Administrator (login=\"admin\" and password=\"admin\") '),\n              _c(\"br\"),\n              _vm._v('- User (login=\"user\" and password=\"user\").')\n            ]\n          )\n        ])\n      ])\n    ])\n  ])\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }","import Vue from 'vue';\nimport { Component, Inject } from 'vue-property-decorator';\nimport { required, minLength, maxLength, helpers, email } from 'vuelidate/lib/validators';\nimport LoginService from '@/account/login.service';\nimport RegisterService from '@/account/register/register.service';\nimport { EMAIL_ALREADY_USED_TYPE, LOGIN_ALREADY_USED_TYPE } from '@/constants';\n\nconst loginPattern = helpers.regex('alpha', /^[_.@A-Za-z0-9-]*$/);\nconst validations: any = {\n  registerAccount: {\n    login: {\n      required,\n      minLength: minLength(1),\n      maxLength: maxLength(50),\n      pattern: loginPattern\n    },\n    email: {\n      required,\n      minLength: minLength(5),\n      maxLength: maxLength(254),\n      email\n    },\n    password: {\n      required,\n      minLength: minLength(4),\n      maxLength: maxLength(254)\n    }\n  },\n  confirmPassword: {\n    required,\n    minLength: minLength(4),\n    maxLength: maxLength(254)\n  }\n};\n@Component({\n  validations\n})\nexport default class Register extends Vue {\n  @Inject('registerService')\n  private registerService: () => RegisterService;\n  @Inject('loginService')\n  private loginService: () => LoginService;\n  public registerAccount: any = {\n    login: undefined,\n    email: undefined,\n    password: undefined\n  };\n  public confirmPassword: any = null;\n  public doNotMatch = '';\n  public error = '';\n  public errorEmailExists = '';\n  public errorUserExists = '';\n  public success = false;\n\n  public register(): void {\n    if (this.registerAccount.password !== this.confirmPassword) {\n      this.doNotMatch = 'ERROR';\n    } else {\n      this.doNotMatch = null;\n      this.error = null;\n      this.errorUserExists = null;\n      this.errorEmailExists = null;\n      this.registerAccount.langKey = this.$store.getters.currentLanguage;\n      this.registerService()\n        .processRegistration(this.registerAccount)\n        .then(() => {\n          this.success = true;\n        })\n        .catch(error => {\n          this.success = null;\n          if (error.response.status === 400 && error.response.data.type === LOGIN_ALREADY_USED_TYPE) {\n            this.errorUserExists = 'ERROR';\n          } else if (error.response.status === 400 && error.response.data.type === EMAIL_ALREADY_USED_TYPE) {\n            this.errorEmailExists = 'ERROR';\n          } else {\n            this.error = 'ERROR';\n          }\n        });\n    }\n  }\n\n  public openLogin(): void {\n    this.loginService().openLogin((<any>this).$root);\n  }\n}\n","import mod from \"-!../../../../../../node_modules/ts-loader/index.js??ref--1-0!./register.component.ts?vue&type=script&lang=ts&\"; export default mod; export * from \"-!../../../../../../node_modules/ts-loader/index.js??ref--1-0!./register.component.ts?vue&type=script&lang=ts&\"","import { render, staticRenderFns } from \"./register.vue?vue&type=template&id=e76dc7ec&\"\nimport script from \"./register.component.ts?vue&type=script&lang=ts&\"\nexport * from \"./register.component.ts?vue&type=script&lang=ts&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (module.hot) {\n  var api = require(\"/Users/wwammaww/github/we-business-project/node_modules/vue-hot-reload-api/dist/index.js\")\n  api.install(require('vue'))\n  if (api.compatible) {\n    module.hot.accept()\n    if (!module.hot.data) {\n      api.createRecord('e76dc7ec', component.options)\n    } else {\n      api.reload('e76dc7ec', component.options)\n    }\n    module.hot.accept(\"./register.vue?vue&type=template&id=e76dc7ec&\", function () {\n      api.rerender('e76dc7ec', {\n        render: render,\n        staticRenderFns: staticRenderFns\n      })\n    })\n  }\n}\ncomponent.options.__file = \"src/main/webapp/app/account/register/register.vue\"\nexport default component.exports"],"sourceRoot":""}