{"version":3,"sources":["webpack:///./src/main/webapp/app/account/settings/settings.vue?d58c","webpack:///./src/main/webapp/app/account/settings/settings.component.ts","webpack:///./src/main/webapp/app/account/settings/settings.component.ts?ce9e","webpack:///./src/main/webapp/app/account/settings/settings.vue"],"names":["render","_vm","this","_h","$createElement","_c","_self","staticClass","username","attrs","id","value","$t","_v","_s","_e","success","role","domProps","innerHTML","errorEmailExists","settingsAccount","name","novalidate","on","submit","$event","preventDefault","save","for","textContent","directives","rawName","$v","firstName","$model","expression","class","valid","$invalid","invalid","type","placeholder","minlength","maxlength","required","input","target","composing","$set","$anyDirty","minLength","maxLength","lastName","email","languages","Object","keys","length","langKey","change","$$selectedVal","Array","prototype","filter","call","options","o","selected","map","_value","multiple","_l","language","key","disabled","_withStripped","n","s","i","r","l","m","validations","validators","settings_settings_componentvue_type_script_lang_ts_","_super","Settings","_this","apply","arguments","error","$store","getters","t","tslib_es6","c","axios_default","a","post","then","catch","response","status","data","constants","defineProperty","get","account","login","enumerable","configurable","b","vue_property_decorator","d","g","component","componentNormalizer","__file","__webpack_exports__","default"],"mappings":"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","file":"app/9.c1f52d746479b3540c33.chunk.js","sourcesContent":["var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\"div\", [\n    _c(\"div\", { staticClass: \"row justify-content-center\" }, [\n      _c(\"div\", { staticClass: \"col-md-8 toastify-container\" }, [\n        _vm.username\n          ? _c(\"h2\", { attrs: { id: \"settings-title\" } }, [\n              _c(\"span\", { attrs: { value: _vm.$t(\"settings.title\") } }, [\n                _vm._v(\"User settings for [\"),\n                _c(\"b\", [_vm._v(_vm._s(_vm.username))]),\n                _vm._v(\"]\")\n              ])\n            ])\n          : _vm._e(),\n        _vm._v(\" \"),\n        _vm.success\n          ? _c(\n              \"div\",\n              {\n                staticClass: \"alert alert-success\",\n                attrs: { role: \"alert\" },\n                domProps: {\n                  innerHTML: _vm._s(_vm.$t(\"settings.messages.success\"))\n                }\n              },\n              [_c(\"strong\", [_vm._v(\"Settings saved!\")])]\n            )\n          : _vm._e(),\n        _vm._v(\" \"),\n        _vm.errorEmailExists\n          ? _c(\n              \"div\",\n              {\n                staticClass: \"alert alert-danger\",\n                attrs: { role: \"alert\" },\n                domProps: {\n                  innerHTML: _vm._s(\n                    _vm.$t(\"register.messages.error.emailexists\")\n                  )\n                }\n              },\n              [\n                _c(\"strong\", [_vm._v(\"Email is already in use!\")]),\n                _vm._v(\" Please choose another one.\\n            \")\n              ]\n            )\n          : _vm._e(),\n        _vm._v(\" \"),\n        _vm.settingsAccount\n          ? _c(\n              \"form\",\n              {\n                attrs: {\n                  name: \"form\",\n                  id: \"settings-form\",\n                  role: \"form\",\n                  novalidate: \"\"\n                },\n                on: {\n                  submit: function($event) {\n                    $event.preventDefault()\n                    return _vm.save()\n                  }\n                }\n              },\n              [\n                _c(\"div\", { staticClass: \"form-group\" }, [\n                  _c(\n                    \"label\",\n                    {\n                      staticClass: \"form-control-label\",\n                      attrs: { for: \"firstName\" },\n                      domProps: {\n                        textContent: _vm._s(_vm.$t(\"settings.form.firstname\"))\n                      }\n                    },\n                    [_vm._v(\"First Name\")]\n                  ),\n                  _vm._v(\" \"),\n                  _c(\"input\", {\n                    directives: [\n                      {\n                        name: \"model\",\n                        rawName: \"v-model\",\n                        value: _vm.$v.settingsAccount.firstName.$model,\n                        expression: \"$v.settingsAccount.firstName.$model\"\n                      }\n                    ],\n                    staticClass: \"form-control\",\n                    class: {\n                      valid: !_vm.$v.settingsAccount.firstName.$invalid,\n                      invalid: _vm.$v.settingsAccount.firstName.$invalid\n                    },\n                    attrs: {\n                      type: \"text\",\n                      id: \"firstName\",\n                      name: \"firstName\",\n                      placeholder: _vm.$t(\n                        \"settings.form['firstname.placeholder']\"\n                      ),\n                      minlength: \"1\",\n                      maxlength: \"50\",\n                      required: \"\"\n                    },\n                    domProps: {\n                      value: _vm.$v.settingsAccount.firstName.$model\n                    },\n                    on: {\n                      input: function($event) {\n                        if ($event.target.composing) {\n                          return\n                        }\n                        _vm.$set(\n                          _vm.$v.settingsAccount.firstName,\n                          \"$model\",\n                          $event.target.value\n                        )\n                      }\n                    }\n                  }),\n                  _vm._v(\" \"),\n                  _vm.$v.settingsAccount.firstName.$anyDirty &&\n                  _vm.$v.settingsAccount.firstName.$invalid\n                    ? _c(\"div\", [\n                        !_vm.$v.settingsAccount.firstName.required\n                          ? _c(\n                              \"small\",\n                              {\n                                staticClass: \"form-text text-danger\",\n                                domProps: {\n                                  textContent: _vm._s(\n                                    _vm.$t(\n                                      \"settings.messages.validate.firstname.required\"\n                                    )\n                                  )\n                                }\n                              },\n                              [\n                                _vm._v(\n                                  \"\\n                            Your first name is required.\\n                        \"\n                                )\n                              ]\n                            )\n                          : _vm._e(),\n                        _vm._v(\" \"),\n                        !_vm.$v.settingsAccount.firstName.minLength\n                          ? _c(\n                              \"small\",\n                              {\n                                staticClass: \"form-text text-danger\",\n                                domProps: {\n                                  textContent: _vm._s(\n                                    _vm.$t(\n                                      \"settings.messages.validate.firstname.minlength\"\n                                    )\n                                  )\n                                }\n                              },\n                              [\n                                _vm._v(\n                                  \"\\n                            Your first name is required to be at least 1 character.\\n                        \"\n                                )\n                              ]\n                            )\n                          : _vm._e(),\n                        _vm._v(\" \"),\n                        !_vm.$v.settingsAccount.firstName.maxLength\n                          ? _c(\n                              \"small\",\n                              {\n                                staticClass: \"form-text text-danger\",\n                                domProps: {\n                                  textContent: _vm._s(\n                                    _vm.$t(\n                                      \"settings.messages.validate.firstname.maxlength\"\n                                    )\n                                  )\n                                }\n                              },\n                              [\n                                _vm._v(\n                                  \"\\n                            Your first name cannot be longer than 50 characters.\\n                        \"\n                                )\n                              ]\n                            )\n                          : _vm._e()\n                      ])\n                    : _vm._e()\n                ]),\n                _vm._v(\" \"),\n                _c(\"div\", { staticClass: \"form-group\" }, [\n                  _c(\n                    \"label\",\n                    {\n                      staticClass: \"form-control-label\",\n                      attrs: { for: \"lastName\" },\n                      domProps: {\n                        textContent: _vm._s(_vm.$t(\"settings.form.lastname\"))\n                      }\n                    },\n                    [_vm._v(\"Last Name\")]\n                  ),\n                  _vm._v(\" \"),\n                  _c(\"input\", {\n                    directives: [\n                      {\n                        name: \"model\",\n                        rawName: \"v-model\",\n                        value: _vm.$v.settingsAccount.lastName.$model,\n                        expression: \"$v.settingsAccount.lastName.$model\"\n                      }\n                    ],\n                    staticClass: \"form-control\",\n                    class: {\n                      valid: !_vm.$v.settingsAccount.lastName.$invalid,\n                      invalid: _vm.$v.settingsAccount.lastName.$invalid\n                    },\n                    attrs: {\n                      type: \"text\",\n                      id: \"lastName\",\n                      name: \"lastName\",\n                      placeholder: _vm.$t(\n                        \"settings.form['lastname.placeholder']\"\n                      ),\n                      minlength: \"1\",\n                      maxlength: \"50\",\n                      required: \"\"\n                    },\n                    domProps: { value: _vm.$v.settingsAccount.lastName.$model },\n                    on: {\n                      input: function($event) {\n                        if ($event.target.composing) {\n                          return\n                        }\n                        _vm.$set(\n                          _vm.$v.settingsAccount.lastName,\n                          \"$model\",\n                          $event.target.value\n                        )\n                      }\n                    }\n                  }),\n                  _vm._v(\" \"),\n                  _vm.$v.settingsAccount.lastName.$anyDirty &&\n                  _vm.$v.settingsAccount.lastName.$invalid\n                    ? _c(\"div\", [\n                        !_vm.$v.settingsAccount.lastName.required\n                          ? _c(\n                              \"small\",\n                              {\n                                staticClass: \"form-text text-danger\",\n                                domProps: {\n                                  textContent: _vm._s(\n                                    _vm.$t(\n                                      \"settings.messages.validate.lastname.required\"\n                                    )\n                                  )\n                                }\n                              },\n                              [\n                                _vm._v(\n                                  \"\\n                            Your last name is required.\\n                        \"\n                                )\n                              ]\n                            )\n                          : _vm._e(),\n                        _vm._v(\" \"),\n                        !_vm.$v.settingsAccount.lastName.minLength\n                          ? _c(\n                              \"small\",\n                              {\n                                staticClass: \"form-text text-danger\",\n                                domProps: {\n                                  textContent: _vm._s(\n                                    _vm.$t(\n                                      \"settings.messages.validate.lastname.minlength\"\n                                    )\n                                  )\n                                }\n                              },\n                              [\n                                _vm._v(\n                                  \"\\n                            Your last name is required to be at least 1 character.\\n                        \"\n                                )\n                              ]\n                            )\n                          : _vm._e(),\n                        _vm._v(\" \"),\n                        !_vm.$v.settingsAccount.lastName.maxLength\n                          ? _c(\n                              \"small\",\n                              {\n                                staticClass: \"form-text text-danger\",\n                                domProps: {\n                                  textContent: _vm._s(\n                                    _vm.$t(\n                                      \"settings.messages.validate.lastname.maxlength\"\n                                    )\n                                  )\n                                }\n                              },\n                              [\n                                _vm._v(\n                                  \"\\n                            Your last name cannot be longer than 50 characters.\\n                        \"\n                                )\n                              ]\n                            )\n                          : _vm._e()\n                      ])\n                    : _vm._e()\n                ]),\n                _vm._v(\" \"),\n                _c(\"div\", { staticClass: \"form-group\" }, [\n                  _c(\n                    \"label\",\n                    {\n                      staticClass: \"form-control-label\",\n                      attrs: { for: \"email\" },\n                      domProps: {\n                        textContent: _vm._s(_vm.$t(\"global.form.email\"))\n                      }\n                    },\n                    [_vm._v(\"Email\")]\n                  ),\n                  _vm._v(\" \"),\n                  _c(\"input\", {\n                    directives: [\n                      {\n                        name: \"model\",\n                        rawName: \"v-model\",\n                        value: _vm.$v.settingsAccount.email.$model,\n                        expression: \"$v.settingsAccount.email.$model\"\n                      }\n                    ],\n                    staticClass: \"form-control\",\n                    class: {\n                      valid: !_vm.$v.settingsAccount.email.$invalid,\n                      invalid: _vm.$v.settingsAccount.email.$invalid\n                    },\n                    attrs: {\n                      type: \"email\",\n                      id: \"email\",\n                      name: \"email\",\n                      placeholder: _vm.$t(\"global.form['email.placeholder']\"),\n                      minlength: \"5\",\n                      maxlength: \"254\",\n                      email: \"\",\n                      required: \"\"\n                    },\n                    domProps: { value: _vm.$v.settingsAccount.email.$model },\n                    on: {\n                      input: function($event) {\n                        if ($event.target.composing) {\n                          return\n                        }\n                        _vm.$set(\n                          _vm.$v.settingsAccount.email,\n                          \"$model\",\n                          $event.target.value\n                        )\n                      }\n                    }\n                  }),\n                  _vm._v(\" \"),\n                  _vm.$v.settingsAccount.email.$anyDirty &&\n                  _vm.$v.settingsAccount.email.$invalid\n                    ? _c(\"div\", [\n                        !_vm.$v.settingsAccount.email.required\n                          ? _c(\n                              \"small\",\n                              {\n                                staticClass: \"form-text text-danger\",\n                                domProps: {\n                                  textContent: _vm._s(\n                                    _vm.$t(\n                                      \"global.messages.validate.email.required\"\n                                    )\n                                  )\n                                }\n                              },\n                              [\n                                _vm._v(\n                                  \"\\n                            Your email is required.\\n                        \"\n                                )\n                              ]\n                            )\n                          : _vm._e(),\n                        _vm._v(\" \"),\n                        !_vm.$v.settingsAccount.email.email\n                          ? _c(\n                              \"small\",\n                              {\n                                staticClass: \"form-text text-danger\",\n                                domProps: {\n                                  textContent: _vm._s(\n                                    _vm.$t(\n                                      \"global.messages.validate.email.invalid\"\n                                    )\n                                  )\n                                }\n                              },\n                              [\n                                _vm._v(\n                                  \"\\n                            Your email is invalid.\\n                        \"\n                                )\n                              ]\n                            )\n                          : _vm._e(),\n                        _vm._v(\" \"),\n                        !_vm.$v.settingsAccount.email.minLength\n                          ? _c(\n                              \"small\",\n                              {\n                                staticClass: \"form-text text-danger\",\n                                domProps: {\n                                  textContent: _vm._s(\n                                    _vm.$t(\n                                      \"global.messages.validate.email.minlength\"\n                                    )\n                                  )\n                                }\n                              },\n                              [\n                                _vm._v(\n                                  \"\\n                            Your email is required to be at least 5 characters.\\n                        \"\n                                )\n                              ]\n                            )\n                          : _vm._e(),\n                        _vm._v(\" \"),\n                        !_vm.$v.settingsAccount.email.maxLength\n                          ? _c(\n                              \"small\",\n                              {\n                                staticClass: \"form-text text-danger\",\n                                domProps: {\n                                  textContent: _vm._s(\n                                    _vm.$t(\n                                      \"global.messages.validate.email.maxlength\"\n                                    )\n                                  )\n                                }\n                              },\n                              [\n                                _vm._v(\n                                  \"\\n                            Your email cannot be longer than 100 characters.\\n                        \"\n                                )\n                              ]\n                            )\n                          : _vm._e()\n                      ])\n                    : _vm._e()\n                ]),\n                _vm._v(\" \"),\n                _vm.languages && Object.keys(_vm.languages).length > 1\n                  ? _c(\"div\", { staticClass: \"form-group\" }, [\n                      _c(\n                        \"label\",\n                        {\n                          attrs: { for: \"langKey\" },\n                          domProps: {\n                            textContent: _vm._s(\n                              _vm.$t(\"settings.form.language\")\n                            )\n                          }\n                        },\n                        [_vm._v(\"Language\")]\n                      ),\n                      _vm._v(\" \"),\n                      _c(\n                        \"select\",\n                        {\n                          directives: [\n                            {\n                              name: \"model\",\n                              rawName: \"v-model\",\n                              value: _vm.settingsAccount.langKey,\n                              expression: \"settingsAccount.langKey\"\n                            }\n                          ],\n                          staticClass: \"form-control\",\n                          attrs: { id: \"langKey\", name: \"langKey\" },\n                          on: {\n                            change: function($event) {\n                              var $$selectedVal = Array.prototype.filter\n                                .call($event.target.options, function(o) {\n                                  return o.selected\n                                })\n                                .map(function(o) {\n                                  var val = \"_value\" in o ? o._value : o.value\n                                  return val\n                                })\n                              _vm.$set(\n                                _vm.settingsAccount,\n                                \"langKey\",\n                                $event.target.multiple\n                                  ? $$selectedVal\n                                  : $$selectedVal[0]\n                              )\n                            }\n                          }\n                        },\n                        _vm._l(_vm.languages, function(language, key) {\n                          return _c(\"option\", { domProps: { value: key } }, [\n                            _vm._v(_vm._s(language.name))\n                          ])\n                        }),\n                        0\n                      )\n                    ])\n                  : _vm._e(),\n                _vm._v(\" \"),\n                _c(\n                  \"button\",\n                  {\n                    staticClass: \"btn btn-primary\",\n                    attrs: {\n                      type: \"submit\",\n                      disabled: _vm.$v.settingsAccount.$invalid\n                    },\n                    domProps: {\n                      textContent: _vm._s(_vm.$t(\"settings.form.button\"))\n                    }\n                  },\n                  [_vm._v(\"Save\")]\n                )\n              ]\n            )\n          : _vm._e()\n      ])\n    ])\n  ])\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }","import { email, maxLength, minLength, required } from 'vuelidate/lib/validators';\nimport axios from 'axios';\nimport { EMAIL_ALREADY_USED_TYPE } from '@/constants';\nimport { Vue, Component, Inject } from 'vue-property-decorator';\n\nconst validations = {\n  settingsAccount: {\n    firstName: {\n      required,\n      minLength: minLength(1),\n      maxLength: maxLength(50)\n    },\n    lastName: {\n      required,\n      minLength: minLength(1),\n      maxLength: maxLength(50)\n    },\n    email: {\n      required,\n      email,\n      minLength: minLength(5),\n      maxLength: maxLength(254)\n    }\n  }\n};\n\n@Component({\n  validations\n})\nexport default class Settings extends Vue {\n  public success: string = null;\n  public error: string = null;\n  public errorEmailExists: string = null;\n  public languages: any = this.$store.getters.languages || [];\n\n  public save(): void {\n    this.error = null;\n    this.errorEmailExists = null;\n    axios\n      .post('api/account', this.settingsAccount)\n      .then(() => {\n        this.error = null;\n        this.success = 'OK';\n        this.errorEmailExists = null;\n      })\n      .catch(error => {\n        this.success = null;\n        this.error = 'ERROR';\n        if (error.response.status === 400 && error.response.data.type === EMAIL_ALREADY_USED_TYPE) {\n          this.errorEmailExists = 'ERROR';\n          this.error = null;\n        }\n      });\n  }\n\n  public get settingsAccount(): any {\n    return this.$store.getters.account;\n  }\n\n  public get username(): string {\n    return this.$store.getters.account ? this.$store.getters.account.login : '';\n  }\n}\n","import mod from \"-!../../../../../../node_modules/ts-loader/index.js??ref--1-0!./settings.component.ts?vue&type=script&lang=ts&\"; export default mod; export * from \"-!../../../../../../node_modules/ts-loader/index.js??ref--1-0!./settings.component.ts?vue&type=script&lang=ts&\"","import { render, staticRenderFns } from \"./settings.vue?vue&type=template&id=27f84c0a&\"\nimport script from \"./settings.component.ts?vue&type=script&lang=ts&\"\nexport * from \"./settings.component.ts?vue&type=script&lang=ts&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (module.hot) {\n  var api = require(\"/Users/wwammaww/github/we-business-project/node_modules/vue-hot-reload-api/dist/index.js\")\n  api.install(require('vue'))\n  if (api.compatible) {\n    module.hot.accept()\n    if (!module.hot.data) {\n      api.createRecord('27f84c0a', component.options)\n    } else {\n      api.reload('27f84c0a', component.options)\n    }\n    module.hot.accept(\"./settings.vue?vue&type=template&id=27f84c0a&\", function () {\n      api.rerender('27f84c0a', {\n        render: render,\n        staticRenderFns: staticRenderFns\n      })\n    })\n  }\n}\ncomponent.options.__file = \"src/main/webapp/app/account/settings/settings.vue\"\nexport default component.exports"],"sourceRoot":""}