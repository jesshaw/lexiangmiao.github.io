{"version":3,"sources":["webpack:///./src/main/webapp/app/account/change-password/change-password.vue?4656","webpack:///./src/main/webapp/app/account/change-password/change-password.component.ts","webpack:///./src/main/webapp/app/account/change-password/change-password.component.ts?afa2","webpack:///./src/main/webapp/app/account/change-password/change-password.vue"],"names":["render","_vm","this","_h","$createElement","_c","_self","staticClass","account","attrs","id","domProps","innerHTML","_s","$t","username","_v","_e","success","role","error","doNotMatch","textContent","name","on","submit","$event","preventDefault","changePassword","for","directives","rawName","value","$v","resetPassword","currentPassword","$model","expression","class","valid","$invalid","invalid","type","placeholder","required","input","target","composing","$set","$anyDirty","newPassword","minlength","maxlength","minLength","maxLength","confirmPassword","disabled","_withStripped","a","e","o","n","d","i","l","c","w","validations","validators","Object","change_password_change_password_componentvue_type_script_lang_ts_","_super","ChangePassword","_this","apply","arguments","s","tslib_es6","prototype","axios_default","post","then","catch","defineProperty","get","$store","getters","login","enumerable","configurable","b","vue_class_component_common_default","computed","vuex_esm","vue_property_decorator","v","component","componentNormalizer","options","__file","__webpack_exports__","default"],"mappings":"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","file":"app/5.c1f52d746479b3540c33.chunk.js","sourcesContent":["var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\"div\", [\n    _c(\"div\", { staticClass: \"row justify-content-center\" }, [\n      _c(\"div\", { staticClass: \"col-md-8 toastify-container\" }, [\n        _vm.account\n          ? _c(\"h2\", { attrs: { id: \"password-title\" } }, [\n              _c(\n                \"span\",\n                {\n                  domProps: {\n                    innerHTML: _vm._s(\n                      _vm.$t(\"password.title\", { username: _vm.username })\n                    )\n                  }\n                },\n                [\n                  _vm._v(\">Password for [\"),\n                  _c(\"b\", [_vm._v(_vm._s(_vm.username))]),\n                  _vm._v(\"]\")\n                ]\n              )\n            ])\n          : _vm._e(),\n        _vm._v(\" \"),\n        _vm.success\n          ? _c(\n              \"div\",\n              {\n                staticClass: \"alert alert-success\",\n                attrs: { role: \"alert\" },\n                domProps: {\n                  innerHTML: _vm._s(_vm.$t(\"password.messages.success\"))\n                }\n              },\n              [_c(\"strong\", [_vm._v(\"Password changed!\")])]\n            )\n          : _vm._e(),\n        _vm._v(\" \"),\n        _vm.error\n          ? _c(\n              \"div\",\n              {\n                staticClass: \"alert alert-danger\",\n                attrs: { role: \"alert\" },\n                domProps: {\n                  innerHTML: _vm._s(_vm.$t(\"password.messages.error\"))\n                }\n              },\n              [\n                _c(\"strong\", [_vm._v(\"An error has occurred!\")]),\n                _vm._v(\" The password could not be changed.\\n            \")\n              ]\n            )\n          : _vm._e(),\n        _vm._v(\" \"),\n        _vm.doNotMatch\n          ? _c(\n              \"div\",\n              {\n                staticClass: \"alert alert-danger\",\n                attrs: { role: \"alert\" },\n                domProps: {\n                  textContent: _vm._s(_vm.$t(\"global.messages.error.dontmatch\"))\n                }\n              },\n              [\n                _vm._v(\n                  \"\\n                The password and its confirmation do not match!\\n            \"\n                )\n              ]\n            )\n          : _vm._e(),\n        _vm._v(\" \"),\n        _c(\n          \"form\",\n          {\n            attrs: { name: \"form\", role: \"form\", id: \"password-form\" },\n            on: {\n              submit: function($event) {\n                $event.preventDefault()\n                return _vm.changePassword()\n              }\n            }\n          },\n          [\n            _c(\"div\", { staticClass: \"form-group\" }, [\n              _c(\n                \"label\",\n                {\n                  staticClass: \"form-control-label\",\n                  attrs: { for: \"currentPassword\" },\n                  domProps: {\n                    textContent: _vm._s(_vm.$t(\"global.form.currentpassword\"))\n                  }\n                },\n                [_vm._v(\"Current password\")]\n              ),\n              _vm._v(\" \"),\n              _c(\"input\", {\n                directives: [\n                  {\n                    name: \"model\",\n                    rawName: \"v-model\",\n                    value: _vm.$v.resetPassword.currentPassword.$model,\n                    expression: \"$v.resetPassword.currentPassword.$model\"\n                  }\n                ],\n                staticClass: \"form-control\",\n                class: {\n                  valid: !_vm.$v.resetPassword.currentPassword.$invalid,\n                  invalid: _vm.$v.resetPassword.currentPassword.$invalid\n                },\n                attrs: {\n                  type: \"password\",\n                  id: \"currentPassword\",\n                  name: \"currentPassword\",\n                  placeholder: _vm.$t(\n                    \"global.form['currentpassword.placeholder']\"\n                  ),\n                  required: \"\"\n                },\n                domProps: {\n                  value: _vm.$v.resetPassword.currentPassword.$model\n                },\n                on: {\n                  input: function($event) {\n                    if ($event.target.composing) {\n                      return\n                    }\n                    _vm.$set(\n                      _vm.$v.resetPassword.currentPassword,\n                      \"$model\",\n                      $event.target.value\n                    )\n                  }\n                }\n              }),\n              _vm._v(\" \"),\n              _vm.$v.resetPassword.currentPassword.$anyDirty &&\n              _vm.$v.resetPassword.currentPassword.$invalid\n                ? _c(\"div\", [\n                    !_vm.$v.resetPassword.currentPassword.required\n                      ? _c(\n                          \"small\",\n                          {\n                            staticClass: \"form-text text-danger\",\n                            domProps: {\n                              textContent: _vm._s(\n                                _vm.$t(\n                                  \"global.messages.validate.newpassword.required\"\n                                )\n                              )\n                            }\n                          },\n                          [\n                            _vm._v(\n                              \"\\n                            Your password is required.\\n                        \"\n                            )\n                          ]\n                        )\n                      : _vm._e()\n                  ])\n                : _vm._e()\n            ]),\n            _vm._v(\" \"),\n            _c(\"div\", { staticClass: \"form-group\" }, [\n              _c(\n                \"label\",\n                {\n                  staticClass: \"form-control-label\",\n                  attrs: { for: \"newPassword\" },\n                  domProps: {\n                    textContent: _vm._s(_vm.$t(\"global.form.newpassword\"))\n                  }\n                },\n                [_vm._v(\"New password\")]\n              ),\n              _vm._v(\" \"),\n              _c(\"input\", {\n                directives: [\n                  {\n                    name: \"model\",\n                    rawName: \"v-model\",\n                    value: _vm.$v.resetPassword.newPassword.$model,\n                    expression: \"$v.resetPassword.newPassword.$model\"\n                  }\n                ],\n                staticClass: \"form-control\",\n                class: {\n                  valid: !_vm.$v.resetPassword.newPassword.$invalid,\n                  invalid: _vm.$v.resetPassword.newPassword.$invalid\n                },\n                attrs: {\n                  type: \"password\",\n                  id: \"newPassword\",\n                  name: \"newPassword\",\n                  placeholder: _vm.$t(\"global.form['newpassword.placeholder']\"),\n                  minlength: \"4\",\n                  maxlength: \"50\",\n                  required: \"\"\n                },\n                domProps: { value: _vm.$v.resetPassword.newPassword.$model },\n                on: {\n                  input: function($event) {\n                    if ($event.target.composing) {\n                      return\n                    }\n                    _vm.$set(\n                      _vm.$v.resetPassword.newPassword,\n                      \"$model\",\n                      $event.target.value\n                    )\n                  }\n                }\n              }),\n              _vm._v(\" \"),\n              _vm.$v.resetPassword.newPassword.$anyDirty &&\n              _vm.$v.resetPassword.newPassword.$invalid\n                ? _c(\"div\", [\n                    !_vm.$v.resetPassword.newPassword.required\n                      ? _c(\n                          \"small\",\n                          {\n                            staticClass: \"form-text text-danger\",\n                            domProps: {\n                              textContent: _vm._s(\n                                _vm.$t(\n                                  \"global.messages.validate.newpassword.required\"\n                                )\n                              )\n                            }\n                          },\n                          [\n                            _vm._v(\n                              \"\\n                            Your password is required.\\n                        \"\n                            )\n                          ]\n                        )\n                      : _vm._e(),\n                    _vm._v(\" \"),\n                    !_vm.$v.resetPassword.newPassword.minLength\n                      ? _c(\n                          \"small\",\n                          {\n                            staticClass: \"form-text text-danger\",\n                            domProps: {\n                              textContent: _vm._s(\n                                _vm.$t(\n                                  \"global.messages.validate.newpassword.minlength\"\n                                )\n                              )\n                            }\n                          },\n                          [\n                            _vm._v(\n                              \"\\n                            Your password is required to be at least 4 characters.\\n                        \"\n                            )\n                          ]\n                        )\n                      : _vm._e(),\n                    _vm._v(\" \"),\n                    !_vm.$v.resetPassword.newPassword.maxLength\n                      ? _c(\n                          \"small\",\n                          {\n                            staticClass: \"form-text text-danger\",\n                            domProps: {\n                              textContent: _vm._s(\n                                _vm.$t(\n                                  \"global.messages.validate.newpassword.maxlength\"\n                                )\n                              )\n                            }\n                          },\n                          [\n                            _vm._v(\n                              \"\\n                            Your password cannot be longer than 50 characters.\\n                        \"\n                            )\n                          ]\n                        )\n                      : _vm._e()\n                  ])\n                : _vm._e()\n            ]),\n            _vm._v(\" \"),\n            _c(\"div\", { staticClass: \"form-group\" }, [\n              _c(\n                \"label\",\n                {\n                  staticClass: \"form-control-label\",\n                  attrs: { for: \"confirmPassword\" },\n                  domProps: {\n                    textContent: _vm._s(_vm.$t(\"global.form.confirmpassword\"))\n                  }\n                },\n                [_vm._v(\"New password confirmation\")]\n              ),\n              _vm._v(\" \"),\n              _c(\"input\", {\n                directives: [\n                  {\n                    name: \"model\",\n                    rawName: \"v-model\",\n                    value: _vm.$v.resetPassword.confirmPassword.$model,\n                    expression: \"$v.resetPassword.confirmPassword.$model\"\n                  }\n                ],\n                staticClass: \"form-control\",\n                class: {\n                  valid: !_vm.$v.resetPassword.confirmPassword.$invalid,\n                  invalid: _vm.$v.resetPassword.confirmPassword.$invalid\n                },\n                attrs: {\n                  type: \"password\",\n                  id: \"confirmPassword\",\n                  name: \"confirmPassword\",\n                  placeholder: _vm.$t(\n                    \"global.form['confirmpassword.placeholder']\"\n                  ),\n                  minlength: \"4\",\n                  maxlength: \"50\",\n                  required: \"\"\n                },\n                domProps: {\n                  value: _vm.$v.resetPassword.confirmPassword.$model\n                },\n                on: {\n                  input: function($event) {\n                    if ($event.target.composing) {\n                      return\n                    }\n                    _vm.$set(\n                      _vm.$v.resetPassword.confirmPassword,\n                      \"$model\",\n                      $event.target.value\n                    )\n                  }\n                }\n              }),\n              _vm._v(\" \"),\n              _vm.$v.resetPassword.confirmPassword.$anyDirty &&\n              _vm.$v.resetPassword.confirmPassword.$invalid\n                ? _c(\"div\", [\n                    !_vm.$v.resetPassword.confirmPassword.required\n                      ? _c(\n                          \"small\",\n                          {\n                            staticClass: \"form-text text-danger\",\n                            domProps: {\n                              textContent: _vm._s(\n                                _vm.$t(\n                                  \"global.messages.validate.confirmpassword.required\"\n                                )\n                              )\n                            }\n                          },\n                          [\n                            _vm._v(\n                              \"\\n                            Your confirmation password is required.\\n                        \"\n                            )\n                          ]\n                        )\n                      : _vm._e(),\n                    _vm._v(\" \"),\n                    !_vm.$v.resetPassword.confirmPassword.minLength\n                      ? _c(\n                          \"small\",\n                          {\n                            staticClass: \"form-text text-danger\",\n                            domProps: {\n                              textContent: _vm._s(\n                                _vm.$t(\n                                  \"global.messages.validate.confirmpassword.minlength\"\n                                )\n                              )\n                            }\n                          },\n                          [\n                            _vm._v(\n                              \"\\n                            Your confirmation password is required to be at least 4 characters.\\n                        \"\n                            )\n                          ]\n                        )\n                      : _vm._e(),\n                    _vm._v(\" \"),\n                    !_vm.$v.resetPassword.confirmPassword.maxLength\n                      ? _c(\n                          \"small\",\n                          {\n                            staticClass: \"form-text text-danger\",\n                            domProps: {\n                              textContent: _vm._s(\n                                _vm.$t(\n                                  \"global.messages.validate.confirmpassword.maxlength\"\n                                )\n                              )\n                            }\n                          },\n                          [\n                            _vm._v(\n                              \"\\n                            Your confirmation password cannot be longer than 50 characters.\\n                        \"\n                            )\n                          ]\n                        )\n                      : _vm._e()\n                  ])\n                : _vm._e()\n            ]),\n            _vm._v(\" \"),\n            _c(\n              \"button\",\n              {\n                staticClass: \"btn btn-primary\",\n                attrs: {\n                  type: \"submit\",\n                  disabled: _vm.$v.resetPassword.$invalid\n                },\n                domProps: {\n                  textContent: _vm._s(_vm.$t(\"password.form.button\"))\n                }\n              },\n              [_vm._v(\"Save\")]\n            )\n          ]\n        )\n      ])\n    ])\n  ])\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }","import { maxLength, minLength, required } from 'vuelidate/lib/validators';\nimport axios from 'axios';\nimport { mapGetters } from 'vuex';\nimport Component from 'vue-class-component';\nimport { Vue, Inject } from 'vue-property-decorator';\n\nconst validations = {\n  resetPassword: {\n    currentPassword: {\n      required\n    },\n    newPassword: {\n      required,\n      minLength: minLength(4),\n      maxLength: maxLength(254)\n    },\n    confirmPassword: {\n      required,\n      minLength: minLength(4),\n      maxLength: maxLength(254)\n    }\n  }\n};\n\n@Component({\n  validations,\n  computed: {\n    ...mapGetters(['account'])\n  }\n})\nexport default class ChangePassword extends Vue {\n  success: string = null;\n  error: string = null;\n  doNotMatch: string = null;\n  resetPassword: any = {\n    currentPassword: null,\n    newPassword: null,\n    confirmPassword: null\n  };\n\n  public changePassword(): void {\n    if (this.resetPassword.newPassword !== this.resetPassword.confirmPassword) {\n      this.error = null;\n      this.success = null;\n      this.doNotMatch = 'ERROR';\n    } else {\n      this.doNotMatch = null;\n      axios\n        .post('api/account/change-password', {\n          currentPassword: this.resetPassword.currentPassword,\n          newPassword: this.resetPassword.newPassword\n        })\n        .then(() => {\n          this.success = 'OK';\n          this.error = null;\n        })\n        .catch(() => {\n          this.success = null;\n          this.error = 'ERROR';\n        });\n    }\n  }\n\n  public get username(): string {\n    return this.$store.getters.account ? this.$store.getters.account.login : '';\n  }\n}\n","import mod from \"-!../../../../../../node_modules/ts-loader/index.js??ref--1-0!./change-password.component.ts?vue&type=script&lang=ts&\"; export default mod; export * from \"-!../../../../../../node_modules/ts-loader/index.js??ref--1-0!./change-password.component.ts?vue&type=script&lang=ts&\"","import { render, staticRenderFns } from \"./change-password.vue?vue&type=template&id=22a31d5c&\"\nimport script from \"./change-password.component.ts?vue&type=script&lang=ts&\"\nexport * from \"./change-password.component.ts?vue&type=script&lang=ts&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (module.hot) {\n  var api = require(\"/Users/wwammaww/github/we-business-project/node_modules/vue-hot-reload-api/dist/index.js\")\n  api.install(require('vue'))\n  if (api.compatible) {\n    module.hot.accept()\n    if (!module.hot.data) {\n      api.createRecord('22a31d5c', component.options)\n    } else {\n      api.reload('22a31d5c', component.options)\n    }\n    module.hot.accept(\"./change-password.vue?vue&type=template&id=22a31d5c&\", function () {\n      api.rerender('22a31d5c', {\n        render: render,\n        staticRenderFns: staticRenderFns\n      })\n    })\n  }\n}\ncomponent.options.__file = \"src/main/webapp/app/account/change-password/change-password.vue\"\nexport default component.exports"],"sourceRoot":""}